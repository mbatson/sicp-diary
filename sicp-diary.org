#+TITLE: SICP Diary
#+OPTIONS: num:nil tex:t

* 1. Building Abstractions with Procedures

** 1.1. The Elements of Programming

*** Exercise 1.1

Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.

#+begin_src scheme :results none
10 ; 10
(+ 5 3 4) ; 12
(- 9 1) ; 8
(/ 6 2) ; 3
(+ (* 2 4) (- 4 6)) ; 6
(define a 3)
(define b (+ a 1))
(+ a b (* a b)) ; 19
(= a b) ; #f
(if (and (> b a) (< b (* a b)))
    b
    a) ; 4
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25)) ; 16
(+ 2 (if (> b a) b a)) ; 6
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1)) ; 16
#+end_src

My answers in inline comments.

All correct.

*** Exercise 1.2

Translate the following expression into prefix form:

\begin{equation*}
\frac{5 + 4 + (2 - (3 - (6 + \frac{4}{5})))}
{3(6 - 2)(2 - 7)}
\end{equation*}

*My answer*

#+begin_src scheme :results none
  (/ (+ 5
        4
        (- 2
           (- 3
              (+ 6 (/ 4 5)))))
     (* 3
        (- 6 2)
        (- 2 7)))
#+end_src

*** Exercise 1.3

Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

*My answer*

#+begin_src scheme :results none
  (define (square x) (* x x))

  (define (sum-of-squares x y) (+ (square x) (square y)))

  (define (sum-of-squares-two-larger-numbers a b c)
    (cond ((and (< a b) (< a c)) (sum-of-squares b c))
          ((and (< b a) (< b c)) (sum-of-squares a c))
          (else (sum-of-squares a b))))
#+end_src

*** Exercise 1.4

Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:

#+begin_src scheme :results none
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+end_src

*My answer*

The procedure ~a-plus-abs-b~ will add ~b~ to ~a~ if ~b~ is greater than ~0~. Otherwise, if ~b~ is less than or equal to ~0~ it will subtract ~b~ from ~a~ (in effect adding the absolute value of ~b~ to ~a~ ~[(- a -b) = (+ a b)]~).

*** Exercise 1.5

Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

#+begin_src scheme :results none
(define (p) (p))

(define (test x y) 
  (if (= x 0) 
      0 
      y))
#+end_src

Then he evaluates the expression

#+begin_src scheme :results none
(test 0 (p))
#+end_src

What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)

*My answer*

Applicative-order evaluation

1. The interpreter evaluates the first argument ~0~, which evaluates to ~0~.
2. ~(p)~ is evaluated and returns itself, the procedure definition ~(p)~.
3. The procedure definition ~(p)~ is evaluated and returns itself, the procedure definition ~(p)~.
4. The procedure definition ~(p)~ is evaluated and returns itself, the procedure definition ~(p)~.
5. And so on in an endless loop.

Normal-order evaluation

1. The interpreter substitutes the operands for the parameters of test.

    #+begin_src scheme :results none
(if (= 0 0)
    0
    (p))
#+end_src

2. ~if~ is a special form which evaluates the predicate first, so ~(= 0 0)~ evaluates to ~#t~.
3. Because the predicate evaluates to true, ~if~ evaluates to ~0~, and never evaluates ~(p)~.

*** Exercise 1.6

Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. “Why can’t I just define it as an ordinary procedure in terms of cond?” she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:

#+begin_src scheme :results none
(define (new-if predicate 
                then-clause 
                else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
#+end_src

Eva demonstrates the program for Alyssa:

#+begin_src scheme :results none
(new-if (= 2 3) 0 5)
5

(new-if (= 1 1) 0 5)
0
#+end_src

Delighted, Alyssa uses new-if to rewrite the square-root program:

#+begin_src scheme :results none
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+end_src

What happens when Alyssa attempts to use this to compute square roots? Explain. 

*My answer*

The same thing will happen as with ~if~:
1. ~new-if~ tests the predicate, ~good-enough?~ with args ~guess~ and ~x~.
2. If true it returns the guess.
3. Otherwise, it calls ~sqrt-iter~ again with an improved guess.

*INCORRECT*

Because ~cond~ is not a special form, and interpreter uses applicative-order evaluation, all the arguments are evaluated regardless of predicate's result. Therefore, when passed a procedure, rather than just primitive values, ~new-if~ enters an endless recursion.

*** Exercise 1.7

The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers? 

*My answer*

Defining necessary procedures (copied from book):

#+name: sqrt-definition
#+begin_src scheme :results value
  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))

  (define (improve guess x)
    (average guess (/ x guess)))

  (define (average x y) 
    (/ (+ x y) 2))

  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))

  (define (square x)
    (* x x))

  (define (sqrt x)
    (sqrt-iter 1.0 x))
#+end_src

For very small numbers, the ~good-enough?~ test returns true within 0.001 difference from ~x~. Combined with the imprecision of arithmetic operations in computers, the smaller the number, the larger the difference 0.001 makes in comparison, making the result increasingly inaccurate. For example:

#+begin_src scheme :noweb strip-export
  <<sqrt-definition>>
  (sqrt 0.5)
#+end_src

Result:
: 0.7071078431372548

Expected result:
: 0.7071067811865475

Second example:

#+begin_src scheme :noweb strip-export
  <<sqrt-definition>>
  (sqrt 0.0005)
#+end_src

Result:
: 0.03640532954316447

Expected result:
: 0.02236067977499789

Third example:

#+begin_src scheme :noweb strip-export
  <<sqrt-definition>>
  (sqrt 0.00000000005)
#+end_src

Result:
: 0.0312500005328125

Expected result:
: 0.0000070710678118

For numbers large enough, the procedure seems to endlessly recur. My guess is that the algorithm used never gets within 0.001 of ~x~ (when ~x~ is a sufficiently large number) for ~good-enough?~ to return true, because of the aforementioned limited precision that arithmetic operations have in real computers. Or it does eventually get close enough, but takes so much time the machine is effectively in an endless loop. For example:

#+begin_src scheme :noweb strip-export
  <<sqrt-definition>>
  (sqrt 938129012232597533532523)
#+end_src

This never returns from evaluation, or takes an unreasonable amount of time to eval (greater than at least a few minutes on my machine).

To implement the alternative strategy for ~good-enough?~, we redefine the procedures ~good-enough?~, ~sqrt-iter~, and ~sqrt~ so that ~good-enough?~ stops when the change between the last guess and the new guess is a very small fraction.

#+name: sqrt-redefined
#+begin_src scheme :noweb strip-export
  (define (average x y) 
    (/ (+ x y) 2))

  (define (improve guess x)
    (average guess (/ x guess)))

  (define (good-enough? guess-current guess-prev)
    (< (abs (- guess-current guess-prev)) 0.000000000000000000001))

  (define (sqrt-iter guess-current guess-prev x)
    (if (good-enough? guess-current guess-prev)
        guess-current
        (sqrt-iter (improve guess-current x) guess-current x)))

  (define (sqrt x)
    (sqrt-iter 1.0 0.0 x))
#+end_src

Now we re-test our very small number using the redefined procedure:

#+begin_src scheme :noweb strip-export
  <<sqrt-redefined>>
  (sqrt 0.00000000005)
#+end_src

Result:
: 0.0000070710678118654756

Expected result:
: 0.0000070710678118654752

And the very large number that our old procedure couldn't compute:

#+begin_src scheme :noweb strip-export
  <<sqrt-redefined>>
  (sqrt 938129012232597533532523)
#+end_src

Result:
: 968570602606.0245

Expected result:
: 968570602606.0245

And for good measure a perfectly average, middle-of-the-road number:

#+begin_src scheme :noweb strip-export
  <<sqrt-redefined>>
  (sqrt 144)
#+end_src

Result:
: 12.0

*** Exercise 1.8

Newton’s method for cube roots is based on the fact that if y is an approximation to the cube root of x , then a better approximation is given by the value

\begin{equation*}
\frac{x / y^2 + 2y}{3}
\end{equation*}

Use this formula to implement a cube-root procedure analogous to the square-root procedure. 

*My answer*

#+name: cbrt-definition
#+begin_src scheme
  (define (cbrt x)
    (cbrt-iter 1.0 0.0 x))

  (define (cbrt-iter guess guess-old x)
    (if (good-enough? guess guess-old)
        guess
        (cbrt-iter (improve x guess) guess x)))

  (define (good-enough? guess guess-old)
    (< (abs (- guess guess-old)) 0.000000000000000000001))

  (define (square x)
    (* x x))

  (define (improve x y)
    (/ (+ (/ x (square y))
          (* 2 y))
       3))
#+end_src

Test 1:

#+begin_src scheme :noweb strip-export
  <<cbrt-definition>>
  (cbrt 27)
#+end_src

Result:
: 3.0

Expected result:
: 3

Test 2:

#+begin_src scheme :noweb strip-export
  <<cbrt-definition>>
  (cbrt 0.00000000005)
#+end_src

Result:
: 0.000368403

Expected result:
: 0.000368403

Test 3:

#+begin_src scheme :noweb strip-export
  <<cbrt-definition>>
  (cbrt 938129012232597533532523)
#+end_src

Result:
: 97893575.02127

Expected result:
: 97893575.02127

** 1.2 Procedures and the Processes They Generate

*** Exercise 1.9

Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.

#+begin_src scheme
(define (+ a b)
  (if (= a 0) 
      b 
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0) 
      b 
      (+ (dec a) (inc b))))
#+end_src

Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive? 

*My answer*

Process generated by first procedural definition of ~+~:

#+begin_src scheme
  (+ 4 5)
  (inc (+ 3 5))
  (inc (inc (+ 2 5)))
  (inc (inc (inc (+ 1 5))))
  (inc (inc (inc (inc (+ 0 5)))))
  (inc (inc (inc (inc 5))))
  (inc (inc (inc 6)))
  (inc (inc 7))
  (inc 8)
  9
#+end_src

The first process is recursive.

Process generated by second procedural definition of ~+~:

#+begin_src scheme
  (+ 4 5)
  (+ 3 6)
  (+ 2 7)
  (+ 1 8)
  (+ 0 9)
  9
#+end_src

The second process is iterative.

*** Exercise 1.10

The following procedure computes a mathematical function called Ackermann’s function.

#+begin_src scheme
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
#+end_src

What are the values of the following expressions?

#+begin_src scheme
(A 1 10)
(A 2 4)
(A 3 3)
#+end_src

Consider the following procedures, where A is the procedure defined above:

#+begin_src scheme
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))
#+end_src

Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes \(5n^2\). 

*My answer*

What is the value of ~(A 1 10)~?

#+begin_src scheme
  (A 1 10)
  (A 0 (A 1 9))
  (A 0 (A 0 (A 1 8)))
  (A 0 (A 0 (A 0 (A 1 7))))
  (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
  (A 0 (A 0 (A 0 (A 0 64))))
  (A 0 (A 0 (A 0 128)))
  (A 0 (A 0 256))
  (A 0 512)
  1024
#+end_src

What is the value of ~(A 2 4)~?

#+begin_src scheme
  (A 2 4)
  (A 1 (A 2 3))
  (A 1 (A 1 (A 2 2)))
  (A 1 (A 1 (A 1 (A 2 1))))
  (A 1 (A 1 (A 1 2)))
  (A 1 (A 1 (A 0 (A 1 1))))
  (A 1 (A 1 (A 0 2)))
  (A 1 (A 1 4))
  (A 1 (A 0 (A 1 3)))
  (A 1 (A 0 (A 0 (A 1 2))))
  (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
  (A 1 (A 0 (A 0 (A 0 2))))
  (A 1 (A 0 (A 0 4)))
  (A 1 (A 0 8))
  (A 1 16)
  ;;; From this point, A continues expansion as per previous example of (A 1 10):
  (A 0 (A 1 15))
  (A 0 (A 0 (A 1 14)))
  (A 0 (A 0 (A 0 (A 1 13)))
  ;;; And so on until y = 1, which returns 2, giving (A 0 (A 0 ... (A 0 2), and A
  ;;; begins final contraction towards its result. (A 1 16) = 2^16, therefore the
  ;;; final result of (A 2 4) is:
  65536
#+end_src

What is the value of ~(A 3 3)~?

#+begin_src scheme
  (A 3 3)
  (A 2 (A 3 2))
  (A 2 (A 2 (A 3 1)))
  (A 2 (A 2 2))
  (A 2 (A 1 (A 2 1)))
  (A 2 (A 1 2))
  (A 2 (A 0 (A 1 1)))
  (A 2 (A 0 2))
  (A 2 4)
  (A 1 (A 2 3))
  (A 1 (A 1 (A 2 2)))
  (A 1 (A 1 (A 1 (A 2 1))))
  (A 1 (A 1 (A 1 2)))
  (A 1 (A 1 (A 0 (A 1 1))))
  (A 1 (A 1 (A 0 2)))
  (A 1 (A 1 4))
  (A 1 (A 0 (A 1 3)))
  (A 1 (A 0 (A 0 (A 1 2))))
  (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
  (A 1 (A 0 (A 0 (A 0 2))))
  (A 1 (A 0 (A 0 4)))
  (A 1 (A 0 8))
  (A 1 16)
  ;;; (A 1 16) = 2^16
  65536
#+end_src

Mathematical definition for the function computed by ~(define (f n) (A 0 n))~:
\( 2n \).

Mathematical definition for the function computed by ~(define (g n) (A 1 n))~:
\( 2^n \).

Mathematical definition for the function computed by ~(define (h n) (A 2 n))~:
\( {^{n}2} \). I had to look up the answer for ~(h n)~ as I was unfamiliar with tetration. 
