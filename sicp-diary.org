#+TITLE: SICP Diary
#+OPTIONS: num:nil

* 1. Building Abstractions with Procedures

** 1.1. The Elements of Programming

*** Exercise 1.1

Below is a sequence of expressions. What is the result printed
by the interpreter in response to each expression? Assume that the sequence is
to be evaluated in the order in which it is presented.

#+begin_src scheme :results none
10 ; 10
(+ 5 3 4) ; 12
(- 9 1) ; 8
(/ 6 2) ; 3
(+ (* 2 4) (- 4 6)) ; 6
(define a 3)
(define b (+ a 1))
(+ a b (* a b)) ; 19
(= a b) ; #f
(if (and (> b a) (< b (* a b)))
    b
    a) ; 4
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25)) ; 16
(+ 2 (if (> b a) b a)) ; 6
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1)) ; 16
#+end_src

My answers in inline comments.

All correct.

*** Exercise 1.2

Translate the expression into prefix form.

*My answer*

#+begin_src scheme :results none
(/ (+ 5
      4
      (- 2
         (- 3
            (+ 6
               (/ 4 5)))))
   (* 3
      (- 6 2)
      (- 2 7)))
#+end_src

*** Exercise 1.3

Define a procedure that takes three numbers as arguments and
returns the sum of the squares of the two larger numbers.

*My answer*

#+begin_src scheme :results none
  (define (square x) (* x x))

  (define (sum-of-squares x y) (+ (square x) (square y)))

  (define (sum-of-squares-two-larger-numbers a b c)
    (cond ((and (< a b) (< a c)) (sum-of-squares b c))
          ((and (< b a) (< b c)) (sum-of-squares a c))
          (else (sum-of-squares a b))))
#+end_src

*** Exercise 1.4

Observe that our model of evaluation allows for combinations
whose operators are compound expressions. Use this observation to describe the
behavior of the following procedure:

#+begin_src scheme :results none
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+end_src

*My answer*

The procedure ~a-plus-abs-b~ will add ~b~ to ~a~ if ~b~ is greater than ~0~. Otherwise,
if ~b~ is less than or equal to ~0~ it will subtract ~b~ from ~a~ (in effect adding the
absolute value of ~b~ to ~a~ ~[(- a -b) = (+ a b)]~).

*** Exercise 1.5

Ben Bitdiddle has invented a test to determine whether the
interpreter he is faced with is using applicative-order evaluation or
normal-order evaluation. He defines the following two procedures:

#+begin_src scheme :results none
(define (p) (p))

(define (test x y) 
  (if (= x 0) 
      0 
      y))
#+end_src

Then he evaluates the expression

#+begin_src scheme :results none
(test 0 (p))
#+end_src

What behavior will Ben observe with an interpreter that uses applicative-order
evaluation? What behavior will he observe with an interpreter that uses
normal-order evaluation? Explain your answer. (Assume that the evaluation rule
for the special form if is the same whether the interpreter is using normal or
applicative order: The predicate expression is evaluated first, and the result
determines whether to evaluate the consequent or the alternative expression.)

*My answer*

Applicative-order evaluation

1. The interpreter evaluates the first argument ~0~, which evaluates to ~0~.
2. ~(p)~ is evaluated and returns itself, the procedure definition ~(p)~.
3. The procedure definition ~(p)~ is evaluated and returns itself, the procedure definition ~(p)~.
4. The procedure definition ~(p)~ is evaluated and returns itself, the procedure definition ~(p)~.
5. And so on in an endless loop.

Normal-order evaluation

1. The interpreter substitutes the operands for the parameters of test.

    #+begin_src scheme :results none
(if (= 0 0)
    0
    (p))
#+end_src

2. ~if~ is a special form which evaluates the predicate first, so ~(= 0 0)~ evaluates to ~#t~.
3. Because the predicate evaluates to true, ~if~ evaluates to ~0~, and never evaluates ~(p)~.
