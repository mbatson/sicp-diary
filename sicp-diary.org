#+TITLE: SICP Diary
#+OPTIONS: num:nil

* 1. Building Abstractions with Procedures

** 1.1. The Elements of Programming

*** Exercise 1.1

Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.

#+begin_src scheme :results none
10 ; 10
(+ 5 3 4) ; 12
(- 9 1) ; 8
(/ 6 2) ; 3
(+ (* 2 4) (- 4 6)) ; 6
(define a 3)
(define b (+ a 1))
(+ a b (* a b)) ; 19
(= a b) ; #f
(if (and (> b a) (< b (* a b)))
    b
    a) ; 4
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25)) ; 16
(+ 2 (if (> b a) b a)) ; 6
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1)) ; 16
#+end_src

My answers in inline comments.

All correct.

*** Exercise 1.2

Translate the expression into prefix form.

*My answer*

#+begin_src scheme :results none
(/ (+ 5
      4
      (- 2
         (- 3
            (+ 6
               (/ 4 5)))))
   (* 3
      (- 6 2)
      (- 2 7)))
#+end_src

*** Exercise 1.3

Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

*My answer*

#+begin_src scheme :results none
  (define (square x) (* x x))

  (define (sum-of-squares x y) (+ (square x) (square y)))

  (define (sum-of-squares-two-larger-numbers a b c)
    (cond ((and (< a b) (< a c)) (sum-of-squares b c))
          ((and (< b a) (< b c)) (sum-of-squares a c))
          (else (sum-of-squares a b))))
#+end_src

*** Exercise 1.4

Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:

#+begin_src scheme :results none
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+end_src

*My answer*

The procedure ~a-plus-abs-b~ will add ~b~ to ~a~ if ~b~ is greater than ~0~. Otherwise, if ~b~ is less than or equal to ~0~ it will subtract ~b~ from ~a~ (in effect adding the absolute value of ~b~ to ~a~ ~[(- a -b) = (+ a b)]~).

*** Exercise 1.5

Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

#+begin_src scheme :results none
(define (p) (p))

(define (test x y) 
  (if (= x 0) 
      0 
      y))
#+end_src

Then he evaluates the expression

#+begin_src scheme :results none
(test 0 (p))
#+end_src

What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)

*My answer*

Applicative-order evaluation

1. The interpreter evaluates the first argument ~0~, which evaluates to ~0~.
2. ~(p)~ is evaluated and returns itself, the procedure definition ~(p)~.
3. The procedure definition ~(p)~ is evaluated and returns itself, the procedure definition ~(p)~.
4. The procedure definition ~(p)~ is evaluated and returns itself, the procedure definition ~(p)~.
5. And so on in an endless loop.

Normal-order evaluation

1. The interpreter substitutes the operands for the parameters of test.

    #+begin_src scheme :results none
(if (= 0 0)
    0
    (p))
#+end_src

2. ~if~ is a special form which evaluates the predicate first, so ~(= 0 0)~ evaluates to ~#t~.
3. Because the predicate evaluates to true, ~if~ evaluates to ~0~, and never evaluates ~(p)~.

*** Exercise 1.6

Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. “Why can’t I just define it as an ordinary procedure in terms of cond?” she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:

#+begin_src scheme :results none
(define (new-if predicate 
                then-clause 
                else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
#+end_src

Eva demonstrates the program for Alyssa:

#+begin_src scheme :results none
(new-if (= 2 3) 0 5)
5

(new-if (= 1 1) 0 5)
0
#+end_src

Delighted, Alyssa uses new-if to rewrite the square-root program:

#+begin_src scheme :results none
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+end_src

What happens when Alyssa attempts to use this to compute square roots? Explain. 

*My answer*

The same thing will happen as with ~if~:
1. ~new-if~ tests the predicate, ~good-enough?~ with args ~guess~ and ~x~.
2. If true it returns the guess.
3. Otherwise, it calls ~sqrt-iter~ again with an improved guess.

*INCORRECT*

Because ~cond~ is not a special form, and interpreter uses applicative-order evaluation, all the arguments are evaluated regardless of predicate's result. Therefore, when passed a procedure, rather than just primitive values, ~new-if~ enters an endless recursion.

*** Exercise 1.7

The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers? 

*My answer*

Defining necessary procedures (copied from book):

#+name: sqrt-definition
#+begin_src scheme :results value
  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))

  (define (improve guess x)
    (average guess (/ x guess)))

  (define (average x y) 
    (/ (+ x y) 2))

  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))

  (define (square x)
    (* x x))

  (define (sqrt x)
    (sqrt-iter 1.0 x))
#+end_src

For very small numbers, the ~good-enough?~ test returns true within 0.001 difference from ~x~. The smaller the number, the larger the difference 0.001 makes in comparison. For example:

#+begin_src scheme :noweb strip-export
  <<sqrt-definition>>
  (sqrt 0.5)
#+end_src

Result:
: 0.7071078431372548

Expected result:
: 0.707106781

Second example:

#+begin_src scheme :noweb strip-export
  <<sqrt-definition>>
  (sqrt 0.0005)
#+end_src

Result:
: 0.03640532954316447

Expected result:
: 0.02236068

Third example:

#+begin_src scheme :noweb strip-export
  <<sqrt-definition>>
  (sqrt 0.00000000005)
#+end_src

Result:
: 0.0312500005328125

Expected result:
: 0.000007071

For numbers large enough, the procedure seems to endlessly recurse. My guess is that the algorithm used never gets within 0.001 of ~x~ (when ~x~ is a sufficiently large number) for ~good-enough?~ to return true, because of the aforementioned limited precision that arithmetic operations have in real computers. Or it does eventually get close enough, but takes so much time the machine is effectively in an endless loop. For example:

#+begin_src scheme :noweb strip-export
  <<sqrt-definition>>
  (sqrt 938129012232597533532523)
#+end_src

This never returns from evaluation, or takes an unreasonable amount of time to eval (greater than at least a few minutes on my machine).
